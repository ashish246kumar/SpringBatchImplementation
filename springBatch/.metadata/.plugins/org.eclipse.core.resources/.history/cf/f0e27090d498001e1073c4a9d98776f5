package com.lean.springBatch.springBatch.config;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.partition.PartitionHandler;
import org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.data.RepositoryItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.task.TaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import com.lean.springBatch.springBatch.entity.Customer;
import com.lean.springBatch.springBatch.partion.ColumnRangePartitioner;
import com.lean.springBatch.springBatch.repository.CustomerRepository;

import lombok.AllArgsConstructor;

@Configuration
@AllArgsConstructor
public class SpringBatchConfig {

	private CustomerRepository customerRespository;
//	private CustomerWriter customerWriter;
	
	
	@Bean
	public FlatFileItemReader<Customer>reader(){
//		C:\\Users\\ashis\\Downloads\\springBatch\\springBatch\\src\\main\\resources\\customer.csv
		FlatFileItemReader<Customer>itemreader=new FlatFileItemReader<>();
		itemreader.setResource(new FileSystemResource("src/main/resources/customers.csv"));
		itemreader.setName("csvreader");
		itemreader.setLinesToSkip(1);
		itemreader.setLineMapper(lineMapper());
		return itemreader;
		
	}
	private LineMapper<Customer>lineMapper(){
		
		DefaultLineMapper<Customer>lineMapper=new DefaultLineMapper<>();
		DelimitedLineTokenizer lineTokenizer=new DelimitedLineTokenizer();
		lineTokenizer.setDelimiter(",");
		lineTokenizer.setStrict(false);
		lineTokenizer.setNames("id","firstName","lastName","email","gender","contactNo","dob");
		BeanWrapperFieldSetMapper<Customer>fieldSetMapper=new BeanWrapperFieldSetMapper<>();
		 fieldSetMapper.setTargetType(Customer.class);
		 lineMapper.setFieldSetMapper(fieldSetMapper);
		 lineMapper.setLineTokenizer(lineTokenizer);
		 return lineMapper;
	}
	@Bean
	public CustomerProcessor processor() {
		return new CustomerProcessor();
	}
	@Bean
	public ColumnRangePartitioner partitioner() {
		return new ColumnRangePartitioner();
	}
	
	@Bean
	public RepositoryItemWriter<Customer>writer(){
		RepositoryItemWriter<Customer>writer=new RepositoryItemWriter<>();
		writer.setRepository(customerRespository);
		writer.setMethodName("save");
		return writer;
	}
	@Bean
	public Step slaveStep(JobRepository jobRepository,PlatformTransactionManager transactionManager) {
		return new StepBuilder("csv-step",jobRepository)
				.<Customer,Customer>chunk(250,transactionManager)
				.reader(reader())
				.processor(processor())
				.writer(writer())
				.taskExecutor(taskExecutor())
				.build();
	}
	@Bean
	public Job runJob(JobRepository jobRepository,PlatformTransactionManager transactionManager) {
		return new JobBuilder("importCustomers",jobRepository)
				.flow(masterStep(jobRepository,transactionManager)).end().build();
	}
	@Bean
	public Step masterStep(JobRepository jobRepository,PlatformTransactionManager transactionManager) {
		return new StepBuilder("masterStep",jobRepository)
				.partitioner(slaveStep(jobRepository, transactionManager).getName(),partitioner())
				.partitionHandler(partitionHandler(jobRepository,transactionManager))
				.build();
				
	}
	@Bean
	public PartitionHandler partitionHandler(JobRepository jobRepository,PlatformTransactionManager transactionManager) {
		TaskExecutorPartitionHandler taskExecutorPartitionHandler=new  TaskExecutorPartitionHandler();
		taskExecutorPartitionHandler.setGridSize(4);
		taskExecutorPartitionHandler.setTaskExecutor(taskExecutor());
		taskExecutorPartitionHandler.setStep(slaveStep(jobRepository,transactionManager));
		return taskExecutorPartitionHandler;
	}
	@Bean
	public TaskExecutor taskExecutor() {
		ThreadPoolTaskExecutor taskExecutor=new ThreadPoolTaskExecutor();
		taskExecutor.setMaxPoolSize(8);
		taskExecutor.setCorePoolSize(8);
		taskExecutor.setQueueCapacity(8);
		return taskExecutor;
	}
}


